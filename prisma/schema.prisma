generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  email            String            @unique
  password         String
  name             String
  birthdate        DateTime?
  gender           String?
  height           Float?
  weight           Float?
  provider         String
  createdAt        DateTime          @default(now())
  aiSearchLogs     AISearchLog[]
  communityPosts   CommunityPost[]
  consultations    Consultation[]
  imageUploads     FoodImage[]
  foodRecords      FoodRecord[]
  healthReports    HealthReport[]
  nutrientTrackers NutrientTracker[]
  comments         PostComment[]
  dietLogs         UserDietLog[]
  healthData       UserDiseaseInfo[]
}

model UserDiseaseInfo {
  id           Int     @id @default(autoincrement())
  userId       Int
  diseaseId    Int
  proteinLimit Float?
  sugarLimit   Float?
  sodiumLimit  Float?
  notes        String?
  disease      Disease @relation(fields: [diseaseId], references: [id])
  user         User    @relation(fields: [userId], references: [id])

  @@index([diseaseId], map: "UserDiseaseInfo_diseaseId_fkey")
  @@index([userId], map: "UserDiseaseInfo_userId_fkey")
}

model Disease {
  id               Int                          @id @default(autoincrement())
  name             String
  description      String?
  maxProteinPerDay Float?
  maxSugarPerDay   Float?
  maxSodiumPerDay  Float?
  categoryId       Int?
  category         RareDiseaseCategory?         @relation(fields: [categoryId], references: [id])
  restrictions     DiseaseNutrientRestriction[]
  warnings         DiseaseWarning[]
  userInfos        UserDiseaseInfo[]

  @@index([categoryId], map: "Disease_categoryId_fkey")
}

model RareDiseaseCategory {
  id           Int       @id @default(autoincrement())
  mainCategory String
  subCategory  String
  diseases     Disease[]
}

model DiseaseWarning {
  id            Int     @id @default(autoincrement())
  diseaseId     Int
  warningType   String
  warningDetail String?
  sourceUrl     String?
  disease       Disease @relation(fields: [diseaseId], references: [id])

  @@index([diseaseId], map: "DiseaseWarning_diseaseId_fkey")
}

model DiseaseNutrientRestriction {
  id              Int     @id @default(autoincrement())
  diseaseId       Int
  nutrientType    String
  maxAmountPerDay Float
  unit            String
  disease         Disease @relation(fields: [diseaseId], references: [id])

  @@index([diseaseId], map: "DiseaseNutrientRestriction_diseaseId_fkey")
}

model Food {
  id            Int            @id @default(autoincrement())
  name          String
  barcode       String?        @unique
  calories      Float?
  protein       Float?
  fat           Float?
  carbs         Float?
  sugar         Float?
  sodium        Float?
  servingSize   String?
  detectedFoods DetectedFood[]
  mealItems     DietLogFood[]
  foodRecords   FoodRecord[]
}

model UserDietLog {
  id               Int               @id @default(autoincrement())
  userId           Int
  date             DateTime
  mealType         String
  notes            String?
  createdAt        DateTime          @default(now())
  foods            DietLogFood[]
  user             User              @relation(fields: [userId], references: [id])
  dietLogFoodInfos DietLogFoodInfo[]

  @@index([userId], map: "UserDietLog_userId_fkey")
}

model DietLogFoodInfo {
  id        Int      @id @default(autoincrement())
  dietLogId Int
  name      String
  energy    Float?
  sodium    Float?
  sugar     Float?
  protein   Float?
  createdAt DateTime @default(now())

  dietLog UserDietLog @relation(fields: [dietLogId], references: [id])

  @@index([dietLogId])
}

model DietLogFood {
  id     Int         @id @default(autoincrement())
  logId  Int
  foodId Int
  amount Float
  food   Food        @relation(fields: [foodId], references: [id])
  log    UserDietLog @relation(fields: [logId], references: [id])

  @@index([foodId], map: "DietLogFood_foodId_fkey")
  @@index([logId], map: "DietLogFood_logId_fkey")
}

model FoodRecord {
  id         Int      @id @default(autoincrement())
  userId     Int
  foodId     Int
  amount     Float
  consumedAt DateTime
  food       Food     @relation(fields: [foodId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([foodId], map: "FoodRecord_foodId_fkey")
  @@index([userId], map: "FoodRecord_userId_fkey")
}

model FoodImage {
  id            Int            @id @default(autoincrement())
  userId        Int
  imageUrl      String
  status        String
  resultText    String?
  createdAt     DateTime       @default(now())
  detectedFoods DetectedFood[]
  user          User           @relation(fields: [userId], references: [id])

  @@index([userId], map: "FoodImage_userId_fkey")
}

model DetectedFood {
  id         Int       @id @default(autoincrement())
  imageId    Int
  foodId     Int
  confidence Float
  food       Food      @relation(fields: [foodId], references: [id])
  image      FoodImage @relation(fields: [imageId], references: [id])

  @@index([foodId], map: "DetectedFood_foodId_fkey")
  @@index([imageId], map: "DetectedFood_imageId_fkey")
}

model HealthReport {
  id                     Int      @id @default(autoincrement())
  userId                 Int
  reportType             String
  startDate              DateTime
  endDate                DateTime
  summary                String?
  totalCalories          Float?
  avgProtein             Float?
  avgCarbs               Float?
  avgFat                 Float?
  avgSodium              Float?
  riskScore              Float?
  improvementSuggestions String?
  createdAt              DateTime @default(now())
  user                   User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "HealthReport_userId_fkey")
}

model NutrientTracker {
  id               Int      @id @default(autoincrement())
  userId           Int
  date             DateTime
  totalProtein     Float
  totalSugar       Float
  totalSodium      Float
  remainingProtein Float
  remainingSugar   Float
  remainingSodium  Float
  user             User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "NutrientTracker_userId_fkey")
}

model CommunityPost {
  id        Int           @id @default(autoincrement())
  userId    Int
  title     String
  content   String
  createdAt DateTime      @default(now())
  user      User          @relation(fields: [userId], references: [id])
  comments  PostComment[]

  @@index([userId], map: "CommunityPost_userId_fkey")
}

model PostComment {
  id        Int           @id @default(autoincrement())
  postId    Int
  userId    Int
  comment   String
  createdAt DateTime      @default(now())
  post      CommunityPost @relation(fields: [postId], references: [id])
  user      User          @relation(fields: [userId], references: [id])

  @@index([postId], map: "PostComment_postId_fkey")
  @@index([userId], map: "PostComment_userId_fkey")
}

model Expert {
  id            Int            @id @default(autoincrement())
  name          String
  specialty     String
  introText     String?
  consultations Consultation[]
}

model Consultation {
  id        Int      @id @default(autoincrement())
  userId    Int
  expertId  Int
  message   String
  createdAt DateTime @default(now())
  expert    Expert   @relation(fields: [expertId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([expertId], map: "Consultation_expertId_fkey")
  @@index([userId], map: "Consultation_userId_fkey")
}

model AISearchLog {
  id            Int      @id @default(autoincrement())
  userId        Int
  searchTerm    String
  resultSummary String?
  searchedAt    DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "AISearchLog_userId_fkey")
}

model RawIngredient {
  id             Int      @id @default(autoincrement())
  foodCode       String   @map("식품코드")
  name           String   @map("식품명")
  origin         String?  @map("식품기원명")
  foodCategory   String?  @map("식품대분류명")
  midCategory    String?  @map("식품중분류명")
  subCategory    String?  @map("식품소분류명")
  detailCategory String?  @map("식품세분류명")
  energy         Float?   @map("에너지(kcal)")
  protein        Float?   @map("단백질(g)")
  fat            Float?   @map("지방(g)")
  carbohydrate   Float?   @map("탄수화물(g)")
  sodium         Float?   @map("나트륨(mg)")
  calcium        Float?   @map("칼슘(mg)")
  iron           Float?   @map("철(mg)")
  vitaminA       Float?   @map("비타민 A(μg RAE)")
  vitaminC       Float?   @map("비타민 C(mg)")
  cholesterol    Float?   @map("콜레스테롤(mg)")
  sourceName     String?  @map("출처명")
  originCountry  String?  @map("원산지국명")
  originRegion   String?  @map("원산지역명")
  createdAt      DateTime @default(now())
}
